import { Component, OnInit, OnDestroy } from '@angular/core';
import { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';
import { ItineraryService } from '../services/itinerary.service';
import { Observable, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';

@Component({
  selector: 'app-itinerary',
  templateUrl: './itinerary.component.html',
  styleUrls: ['./itinerary.component.css']
})
export class ItineraryComponent implements OnInit, OnDestroy {
  itineraries$: Observable<any[]> = new Observable();
  itineraryForm!: FormGroup;
  selectedItinerary: any = null;
  isEditing = false;
  isLoading = false;
  errorMessage = '';
  private destroy$ = new Subject<void>();

  constructor(private fb: FormBuilder, private itineraryService: ItineraryService) {}

  ngOnInit(): void {
    this.loadItineraries();
    this.initializeForm();
  }

  loadItineraries(): void {
    this.isLoading = true;
    this.itineraries$ = this.itineraryService.getItineraries().pipe(takeUntil(this.destroy$));
    this.itineraries$.subscribe({
      next: () => (this.isLoading = false),
      error: (error) => {
        this.isLoading = false;
        this.errorMessage = 'Failed to load itineraries.';
        console.error(error);
      }
    });
  }

  initializeForm(): void {
    this.itineraryForm = this.fb.group({
      destination: ['', Validators.required],
      startDate: ['', Validators.required],
      endDate: ['', Validators.required],
      attractions: this.fb.array([]),
      lodging: this.fb.array([]),
      dining: this.fb.array([]),
      activities: this.fb.array([])
    });
  }

  openAddEditForm(itinerary: any = null): void {
    this.selectedItinerary = itinerary;
    this.isEditing = !!itinerary;
    this.errorMessage = '';

    if (itinerary) {
      this.itineraryForm.patchValue(itinerary);
      this.setArrayControls('attractions', itinerary.attractions);
      this.setArrayControls('lodging', itinerary.lodging);
      this.setArrayControls('dining', itinerary.dining);
      this.setArrayControls('activities', itinerary.activities);
    } else {
      this.itineraryForm.reset();
      this.initializeEmptyFormArrays();
    }
  }

  initializeEmptyFormArrays(): void {
    this.itineraryForm.setControl('attractions', this.fb.array([]));
    this.itineraryForm.setControl('lodging', this.fb.array([]));
    this.itineraryForm.setControl('dining', this.fb.array([]));
    this.itineraryForm.setControl('activities', this.fb.array([]));
  }

  setArrayControls(controlName: string, values: string[]): void {
    const formArray = this.fb.array(values.map(value => this.fb.control(value, Validators.required)));
    this.itineraryForm.setControl(controlName, formArray);
  }

  getFormArray(controlName: string): FormArray {
    return this.itineraryForm.get(controlName) as FormArray;
  }

  addArrayItem(controlName: string): void {
    this.getFormArray(controlName).push(this.fb.control('', Validators.required));
  }

  removeArrayItem(controlName: string, index: number): void {
    this.getFormArray(controlName).removeAt(index);
  }

  saveItinerary(): void {
    if (this.itineraryForm.invalid) {
      this.errorMessage = 'Please fill in all required fields.';
      return;
    }

    this.isLoading = true;
    const itineraryData = this.itineraryForm.value;

    const saveOperation = this.isEditing
      ? this.itineraryService.updateItinerary(this.selectedItinerary.id, itineraryData)
      : this.itineraryService.addItinerary(itineraryData);

    saveOperation.pipe(takeUntil(this.destroy$)).subscribe({
      next: () => {
        this.isLoading = false;
        this.loadItineraries();
        this.selectedItinerary = null;
      },
      error: (error) => {
        this.isLoading = false;
        this.errorMessage = 'Failed to save itinerary.';
        console.error(error);
      }
    });
  }

  deleteItinerary(id: number): void {
    if (!confirm('Are you sure you want to delete this itinerary?')) return;

    this.isLoading = true;
    this.itineraryService.deleteItinerary(id).pipe(takeUntil(this.destroy$)).subscribe({
      next: () => {
        this.isLoading = false;
        this.loadItineraries();
      },
      error: (error) => {
        this.isLoading = false;
        this.errorMessage = 'Failed to delete itinerary.';
        console.error(error);
      }
    });
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }
}
