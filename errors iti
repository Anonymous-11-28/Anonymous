errors

Error: src/app/components/admin-components/admin-itineraries/admin-itineraries.component.html:39:26 - error TS2339: Property 'itineraryForm' does not exist on type 'AdminItineraryComponent'.

39       <form [formGroup]="itineraryForm" (ngSubmit)="saveItinerary()">
                            ~~~~~~~~~~~~~

  src/app/components/admin-components/admin-itineraries/admin-itineraries.component.ts:17:16
    17   templateUrl: './admin-itineraries.component.html',
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Error occurs in the template of component AdminItineraryComponent.


Error: src/app/components/admin-components/admin-itineraries/admin-itineraries.component.html:62:40 - error TS2339: Property 'closeForm' does not exist on type 'AdminItineraryComponent'.

62         <button type="button" (click)="closeForm()" class="cancel-btn">Cancel</button>
                                          ~~~~~~~~~

  src/app/components/admin-components/admin-itineraries/admin-itineraries.component.ts:17:16
    17   templateUrl: './admin-itineraries.component.html',
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Error occurs in the template of component AdminItineraryComponent.




Ã— Failed to compile.



again errors


Compiled with problems:X

ERROR

src/app/components/admin-components/admin-itineraries/admin-itineraries.component.html:39:26 - error TS2339: Property 'itineraryForm' does not exist on type 'AdminItinerariesComponent'.

39       <form [formGroup]="itineraryForm" (ngSubmit)="saveItinerary()">
                            ~~~~~~~~~~~~~

  src/app/components/admin-components/admin-itineraries/admin-itineraries.component.ts:17:16
    17   templateUrl: './admin-itineraries.component.html',
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Error occurs in the template of component AdminItinerariesComponent.















 openAddForm(): void {
    this.selectedItinerary = { id: '', startDate: '', endDate: '' };
    this.isEditing = false;
    this.showForm = true;
  }


<button (click)="openAddForm()">Add New Itinerary</button>

"itinerary": [
    {
      "id": "a189",
      "destinationId": "1",
      "attractions": [
        "Sacred Monkey Forest"
      ],
      "lodging": [
        "Luxury Resort"
      ],
      "dining": [
        "Bali Cafe"
      ],
      "activities": [
        "Surfing"
      ],
      "startDate": "2025-04-01",
      "endDate": "2025-04-10"
    },
    {
      "id": "38af",
      "name": "hello",
      "description": "hi",
      "startDate": "2025-04-17",
      "endDate": "2025-04-30"
    }
  ]

i want all these in to be added by admin






ts 


import { Component, OnInit } from '@angular/core';
import { AdminItineraryService } from '../../services/admin-itinerary.service';

interface Itinerary {
  id: string;
  destinationId: string;
  attractions: string[];
  lodging: string[];
  dining: string[];
  activities: string[];
  startDate: string;
  endDate: string;
}

@Component({
  selector: 'app-admin-itinerary',
  templateUrl: './admin-itinerary.component.html',
  styleUrls: ['./admin-itinerary.component.css']
})
export class AdminItineraryComponent implements OnInit {
  itineraries: Itinerary[] = [];
  showForm = false;
  isEditing = false;
  selectedItinerary: Itinerary = {
    id: '',
    destinationId: '',
    attractions: [],
    lodging: [],
    dining: [],
    activities: [],
    startDate: '',
    endDate: ''
  };

  constructor(private adminItineraryService: AdminItineraryService) {}

  ngOnInit(): void {
    this.loadItineraries();
  }

  loadItineraries(): void {
    this.adminItineraryService.getItineraries().subscribe((data) => {
      this.itineraries = data;
    });
  }

  openAddForm(): void {
    this.selectedItinerary = {
      id: '',
      destinationId: '',
      attractions: [],
      lodging: [],
      dining: [],
      activities: [],
      startDate: '',
      endDate: ''
    };
    this.isEditing = false;
    this.showForm = true;
  }

  openEditForm(itinerary: Itinerary): void {
    this.selectedItinerary = { ...itinerary };
    this.isEditing = true;
    this.showForm = true;
  }

  saveItinerary(): void {
    if (this.isEditing) {
      this.adminItineraryService.updateItinerary(this.selectedItinerary.id, this.selectedItinerary).subscribe(() => {
        this.loadItineraries();
        this.showForm = false;
      });
    } else {
      this.selectedItinerary.id = Math.random().toString(36).substr(2, 9); // Generate a random ID
      this.adminItineraryService.addItinerary(this.selectedItinerary).subscribe(() => {
        this.loadItineraries();
        this.showForm = false;
      });
    }
  }

  deleteItinerary(id: string): void {
    this.adminItineraryService.deleteItinerary(id).subscribe(() => {
      this.itineraries = this.itineraries.filter(itinerary => itinerary.id !== id);
    });
  }
}



html 


<div class="itinerary-container">
  <h2>Manage Itineraries</h2>
  <button (click)="openAddForm()" class="add-btn">Add New Itinerary</button>

  <table>
    <thead>
      <tr>
        <th>Destination ID</th>
        <th>Attractions</th>
        <th>Lodging</th>
        <th>Dining</th>
        <th>Activities</th>
        <th>Start Date</th>
        <th>End Date</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let itinerary of itineraries">
        <td>{{ itinerary.destinationId }}</td>
        <td>{{ itinerary.attractions.join(', ') }}</td>
        <td>{{ itinerary.lodging.join(', ') }}</td>
        <td>{{ itinerary.dining.join(', ') }}</td>
        <td>{{ itinerary.activities.join(', ') }}</td>
        <td>{{ itinerary.startDate }}</td>
        <td>{{ itinerary.endDate }}</td>
        <td>
          <button (click)="openEditForm(itinerary)" class="edit-btn">Edit</button>
          <button (click)="deleteItinerary(itinerary.id)" class="delete-btn">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>

  <div *ngIf="showForm" class="form-container">
    <h3>{{ isEditing ? 'Edit Itinerary' : 'Add Itinerary' }}</h3>
    <label>Destination ID:</label>
    <input [(ngModel)]="selectedItinerary.destinationId" />

    <label>Attractions (comma separated):</label>
    <input [(ngModel)]="selectedItinerary.attractions" (change)="selectedItinerary.attractions = $event.target.value.split(',')" />

    <label>Lodging (comma separated):</label>
    <input [(ngModel)]="selectedItinerary.lodging" (change)="selectedItinerary.lodging = $event.target.value.split(',')" />

    <label>Dining (comma separated):</label>
    <input [(ngModel)]="selectedItinerary.dining" (change)="selectedItinerary.dining = $event.target.value.split(',')" />

    <label>Activities (comma separated):</label>
    <input [(ngModel)]="selectedItinerary.activities" (change)="selectedItinerary.activities = $event.target.value.split(',')" />

    <label>Start Date:</label>
    <input type="date" [(ngModel)]="selectedItinerary.startDate" />

    <label>End Date:</label>
    <input type="date" [(ngModel)]="selectedItinerary.endDate" />

    <button (click)="saveItinerary()" class="save-btn">Save</button>
    <button (click)="showForm = false" class="cancel-btn">Cancel</button>
  </div>
</div>

service 


import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AdminItineraryService {
  private apiUrl = 'http://localhost:3000/itinerary';

  constructor(private http: HttpClient) {}

  getItineraries(): Observable<any[]> {
    return this.http.get<any[]>(this.apiUrl);
  }

  addItinerary(itinerary: any): Observable<any> {
    return this.http.post(this.apiUrl, itinerary);
  }

  updateItinerary(id: string, itinerary: any): Observable<any> {
    return this.http.put(`${this.apiUrl}/${id}`, itinerary);
  }

  deleteItinerary(id: string): Observable<any> {
    return this.http.delete(`${this.apiUrl}/${id}`);
  }
}



html updated


<div class="itinerary-container">
  <h2>Manage Itineraries</h2>
  <button (click)="openAddForm()" class="add-btn">Add New Itinerary</button>

  <table>
    <thead>
      <tr>
        <th>Destination ID</th>
        <th>Attractions</th>
        <th>Lodging</th>
        <th>Dining</th>
        <th>Activities</th>
        <th>Start Date</th>
        <th>End Date</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let itinerary of itineraries">
        <td>{{ itinerary.destinationId }}</td>
        <td>{{ itinerary.attractions.join(', ') }}</td>
        <td>{{ itinerary.lodging.join(', ') }}</td>
        <td>{{ itinerary.dining.join(', ') }}</td>
        <td>{{ itinerary.activities.join(', ') }}</td>
        <td>{{ itinerary.startDate }}</td>
        <td>{{ itinerary.endDate }}</td>
        <td>
          <button (click)="openEditForm(itinerary)" class="edit-btn">Edit</button>
          <button (click)="deleteItinerary(itinerary.id)" class="delete-btn">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>

  <!-- Form Section -->
  <div *ngIf="showForm" class="form-container">
    <h3>{{ isEditing ? 'Edit Itinerary' : 'Add Itinerary' }}</h3>
    
    <form [formGroup]="itineraryForm" (ngSubmit)="saveItinerary()">
      <label>Destination ID:</label>
      <input formControlName="destinationId" required />

      <label>Attractions (comma separated):</label>
      <input formControlName="attractions" required />

      <label>Lodging (comma separated):</label>
      <input formControlName="lodging" required />

      <label>Dining (comma separated):</label>
      <input formControlName="dining" required />

      <label>Activities (comma separated):</label>
      <input formControlName="activities" required />

      <label>Start Date:</label>
      <input type="date" formControlName="startDate" required />

      <label>End Date:</label>
      <input type="date" formControlName="endDate" required />

      <button type="submit" class="save-btn">Save</button>
      <button type="button" (click)="closeForm()" class="cancel-btn">Cancel</button>
    </form>
  </div>
</div>




admin ts



import { Component, OnInit } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
import { AdminItineraryService } from '../../../services/admin-itinerary.service';

@Component({
  selector: 'app-admin-itineraries',
  templateUrl: './admin-itineraries.component.html',
  styleUrls: ['./admin-itineraries.component.css']
})
export class AdminItinerariesComponent implements OnInit {
  itineraries: any[] = [];
  showForm = false;
  isEditing = false;

  // Initialize itineraryForm
  itineraryForm: FormGroup = new FormGroup({
    destinationId: new FormControl(''),
    attractions: new FormControl(''),
    lodging: new FormControl(''),
    dining: new FormControl(''),
    activities: new FormControl(''),
    startDate: new FormControl(''),
    endDate: new FormControl('')
  });

  constructor(private adminItineraryService: AdminItineraryService) {}

  ngOnInit(): void {
    this.loadItineraries();
  }

  loadItineraries(): void {
    this.adminItineraryService.getItineraries().subscribe((data) => {
      this.itineraries = data;
    });
  }

  openAddForm(): void {
    this.isEditing = false;
    this.itineraryForm.reset();
    this.showForm = true;
  }

  closeForm(): void {
    this.showForm = false;
  }
}







old ts 



import { Component, OnInit } from '@angular/core';
import { AdminItineraryService } from '../../../services/admin-services/admin-itineraries.service';

interface Itinerary {
  id: string;
  destinationId: string;
  attractions: string[];
  lodging: string[];
  dining: string[];
  activities: string[];
  startDate: string;
  endDate: string;
}

@Component({
  selector: 'app-admin-itineraries',
  templateUrl: './admin-itineraries.component.html',
  styleUrls: ['./admin-itineraries.component.css']
})
export class AdminItineraryComponent implements OnInit {
  itineraries: Itinerary[] = [];
  showForm = false;
  isEditing = false;
  selectedItinerary: Itinerary = {
    id: '',
    destinationId: '',
    attractions: [],
    lodging: [],
    dining: [],
    activities: [],
    startDate: '',
    endDate: ''
  };

  constructor(private adminItineraryService: AdminItineraryService) {}

  ngOnInit(): void {
    this.loadItineraries();
  }

  loadItineraries(): void {
    this.adminItineraryService.getItineraries().subscribe((data) => {
      this.itineraries = data;
    });
  }

  openAddForm(): void {
    this.selectedItinerary = {
      id: '',
      destinationId: '',
      attractions: [],
      lodging: [],
      dining: [],
      activities: [],
      startDate: '',
      endDate: ''
    };
    this.isEditing = false;
    this.showForm = true;
  }

  openEditForm(itinerary: Itinerary): void {
    this.selectedItinerary = { ...itinerary };
    this.isEditing = true;
    this.showForm = true;
  }

  saveItinerary(): void {
    if (this.isEditing) {
      this.adminItineraryService.updateItinerary(this.selectedItinerary.id, this.selectedItinerary).subscribe(() => {
        this.loadItineraries();
        this.showForm = false;
      });
    } else {
      this.selectedItinerary.id = Math.random().toString(36).substr(2, 9); // Generate a random ID
      this.adminItineraryService.addItinerary(this.selectedItinerary).subscribe(() => {
        this.loadItineraries();
        this.showForm = false;
      });
    }
  }

  deleteItinerary(id: string): void {
    this.adminItineraryService.deleteItinerary(id).subscribe(() => {
      this.itineraries = this.itineraries.filter(itinerary => itinerary.id !== id);
    });
  }
}




updated ts

import { Component, OnInit } from '@angular/core';
import { AdminItineraryService } from '../../../services/admin-services/admin-itineraries.service';

interface Itinerary {
  id: string;
  destinationId: string;
  attractions: string[];
  lodging: string[];
  dining: string[];
  activities: string[];
  startDate: string;
  endDate: string;
}

@Component({
  selector: 'app-admin-itineraries',
  templateUrl: './admin-itineraries.component.html',
  styleUrls: ['./admin-itineraries.component.css']
})
export class AdminItinerariesComponent implements OnInit {
  itineraries: Itinerary[] = [];
  showForm = false;
  isEditing = false;
  selectedItinerary: Itinerary = this.getEmptyItinerary();

  constructor(private adminItineraryService: AdminItineraryService) {}

  ngOnInit(): void {
    this.loadItineraries();
  }

  // Load itineraries from service
  loadItineraries(): void {
    this.adminItineraryService.getItineraries().subscribe((data) => {
      this.itineraries = data;
    });
  }

  // Open Add Form
  openAddForm(): void {
    this.selectedItinerary = this.getEmptyItinerary();
    this.isEditing = false;
    this.showForm = true;
  }

  // Open Edit Form
  openEditForm(itinerary: Itinerary): void {
    this.selectedItinerary = { ...itinerary };
    this.isEditing = true;
    this.showForm = true;
  }

  // Save or Update Itinerary
  saveItinerary(): void {
    if (this.isEditing) {
      this.adminItineraryService.updateItinerary(this.selectedItinerary.id, this.selectedItinerary).subscribe(() => {
        this.loadItineraries();
        this.showForm = false;
      });
    } else {
      this.selectedItinerary.id = Math.random().toString(36).substr(2, 9); // Generate a random ID
      this.adminItineraryService.addItinerary(this.selectedItinerary).subscribe(() => {
        this.loadItineraries();
        this.showForm = false;
      });
    }
  }

  // Delete Itinerary
  deleteItinerary(id: string): void {
    this.adminItineraryService.deleteItinerary(id).subscribe(() => {
      this.itineraries = this.itineraries.filter(itinerary => itinerary.id !== id);
    });
  }

  // Close Form
  closeForm(): void {
    this.showForm = false;
  }

  // Helper: Get Empty Itinerary Object
  private getEmptyItinerary(): Itinerary {
    return {
      id: '',
      destinationId: '',
      attractions: [],
      lodging: [],
      dining: [],
      activities: [],
      startDate: '',
      endDate: ''
    };
  }
}



updated ts





import { Component, OnInit } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { AdminItineraryService } from '../../../services/admin-services/admin-itineraries.service';

interface Itinerary {
  id: string;
  destinationId: string;
  attractions: string[];
  lodging: string[];
  dining: string[];
  activities: string[];
  startDate: string;
  endDate: string;
}

@Component({
  selector: 'app-admin-itineraries',
  templateUrl: './admin-itineraries.component.html',
  styleUrls: ['./admin-itineraries.component.css']
})
export class AdminItinerariesComponent implements OnInit {
  itineraries: Itinerary[] = [];
  showForm = false;
  isEditing = false;
  itineraryForm: FormGroup;
  selectedItineraryId: string = '';

  constructor(private fb: FormBuilder, private adminItineraryService: AdminItineraryService) {
    this.itineraryForm = this.fb.group({
      destinationId: ['', Validators.required],
      attractions: [''],
      lodging: [''],
      dining: [''],
      activities: [''],
      startDate: ['', Validators.required],
      endDate: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    this.loadItineraries();
  }

  // Load all itineraries
  loadItineraries(): void {
    this.adminItineraryService.getItineraries().subscribe((data) => {
      this.itineraries = data;
    });
  }

  // Open Add Form
  openAddForm(): void {
    this.itineraryForm.reset();
    this.isEditing = false;
    this.showForm = true;
  }

  // Open Edit Form
  openEditForm(itinerary: Itinerary): void {
    this.selectedItineraryId = itinerary.id;
    this.itineraryForm.patchValue(itinerary);
    this.isEditing = true;
    this.showForm = true;
  }

  // Save or Update Itinerary
  saveItinerary(): void {
    const formData: Itinerary = {
      id: this.isEditing ? this.selectedItineraryId : Math.random().toString(36).substr(2, 9),
      ...this.itineraryForm.value
    };

    if (this.isEditing) {
      this.adminItineraryService.updateItinerary(formData.id, formData).subscribe(() => {
        this.loadItineraries();
        this.showForm = false;
      });
    } else {
      this.adminItineraryService.addItinerary(formData).subscribe(() => {
        this.loadItineraries();
        this.showForm = false;
      });
    }
  }

  // Delete Itinerary
  deleteItinerary(id: string): void {
    this.adminItineraryService.deleteItinerary(id).subscribe(() => {
      this.itineraries = this.itineraries.filter(itinerary => itinerary.id !== id);
    });
  }

  // Close Form
  closeForm(): void {
    this.showForm = false;
  }
}


updated html 



<div class="container">
  <h2>Manage Itineraries</h2>
  <button (click)="openAddForm()" class="add-btn">Add New Itinerary</button>

  <!-- Itinerary List -->
  <table class="itinerary-table">
    <thead>
      <tr>
        <th>Destination ID</th>
        <th>Attractions</th>
        <th>Lodging</th>
        <th>Dining</th>
        <th>Activities</th>
        <th>Start Date</th>
        <th>End Date</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let itinerary of itineraries">
        <td>{{ itinerary.destinationId }}</td>
        <td>{{ itinerary.attractions.join(', ') }}</td>
        <td>{{ itinerary.lodging.join(', ') }}</td>
        <td>{{ itinerary.dining.join(', ') }}</td>
        <td>{{ itinerary.activities.join(', ') }}</td>
        <td>{{ itinerary.startDate }}</td>
        <td>{{ itinerary.endDate }}</td>
        <td>
          <button (click)="openEditForm(itinerary)">Edit</button>
          <button (click)="deleteItinerary(itinerary.id)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>

  <!-- Itinerary Form -->
  <div *ngIf="showForm" class="form-container">
    <form [formGroup]="itineraryForm" (ngSubmit)="saveItinerary()">
      <label>Destination ID:</label>
      <input type="text" formControlName="destinationId" required />

      <label>Attractions (comma-separated):</label>
      <input type="text" formControlName="attractions" />

      <label>Lodging:</label>
      <input type="text" formControlName="lodging" />

      <label>Dining:</label>
      <input type="text" formControlName="dining" />

      <label>Activities:</label>
      <input type="text" formControlName="activities" />

      <label>Start Date:</label>
      <input type="date" formControlName="startDate" required />

      <label>End Date:</label>
      <input type="date" formControlName="endDate" required />

      <button type="submit">{{ isEditing ? 'Update' : 'Add' }} Itinerary</button>
      <button type="button" (click)="closeForm()">Cancel</button>
    </form>
  </div>
</div>


CSS 


.container {
  width: 80%;
  margin: auto;
  text-align: center;
}

.add-btn {
  margin: 10px;
  padding: 8px;
  background: green;
  color: white;
  border: none;
  cursor: pointer;
}

.itinerary-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

.itinerary-table th, .itinerary-table td {
  border: 1px solid #ddd;
  padding: 8px;
}

.form-container {
  margin-top: 20px;
  padding: 20px;
  background: #f9f9f9;
  border-radius: 8px;
}

form label {
  display: block;
  margin-top: 10px;
  font-weight: bold;
}

form input {
  width: 100%;
  padding: 5px;
  margin-top: 5px;
}

form button {
  margin-top: 10px;
  padding: 8px;
  border: none;
  cursor: pointer;
}

form button:first-child {
  background: blue;
  color: white;
}

form button:last-child {
  background: red;
  color: white;
}

