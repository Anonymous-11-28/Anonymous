services

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class AdminItinerariesService {
  private apiUrl = 'http://localhost:3000/itinerary'; // API URL for itineraries

  constructor(private http: HttpClient) {}

  // Get all itineraries
  getItineraries(): Observable<any[]> {
    return this.http.get<any[]>(this.apiUrl).pipe(
      map(response => response), // Modify this if the response has a wrapper
      catchError(this.handleError)
    );
  }

  // Add a new itinerary
  addItinerary(itinerary: any): Observable<any> {
    console.log('Sending POST request to add itinerary:', itinerary);  // Add debug logging
    return this.http.post<any>(this.apiUrl, itinerary).pipe(
      catchError(this.handleError)
    );
  }

  // Edit an existing itinerary
  updateItinerary(itineraryId: string, itinerary: any): Observable<any> {
    console.log('Sending PUT request to update itinerary with ID:', itineraryId, itinerary); // Add debug logging
    return this.http.put<any>(`${this.apiUrl}/${itineraryId}`, itinerary).pipe(
      catchError(this.handleError)
    );
  }

  // Delete an itinerary
  deleteItinerary(itineraryId: string): Observable<any> {
    console.log('Sending DELETE request for itinerary with ID:', itineraryId); // Add debug logging
    return this.http.delete<any>(`${this.apiUrl}/${itineraryId}`).pipe(
      catchError(this.handleError)
    );
  }

  // Error handling function
  private handleError(error: any): Observable<never> {
    let errorMessage = 'Something went wrong, please try again later.';
    
    if (error.error instanceof ErrorEvent) {
      // Client-side or network error occurred
      console.error('Client-side error:', error.error.message);
      errorMessage = `Client-side error: ${error.error.message}`;
    } else {
      // Backend error occurred
      console.error(`Backend error: ${error.status}, body was: ${error.error}`);
      errorMessage = `Backend error: ${error.status}, ${error.error?.message || 'Unknown error'}`;
    }

    // Display a user-friendly message (can be improved to show in UI)
    return throwError(() => new Error(errorMessage));
  }
}


services


import { Injectable, inject } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';

// Define an interface for strong typing
export interface Itinerary {
  id?: string; // Optional for new itineraries
  title: string;
  description: string;
  destination: string;
  startDate: string; // Use Date if needed
  endDate: string;   // Use Date if needed
}

@Injectable({
  providedIn: 'root'
})
export class AdminItinerariesService {
  private apiUrl = 'http://localhost:3000/itinerary'; // Adjust API URL if needed

  private http = inject(HttpClient); // Angular 15 inject function

  // Get all itineraries
  getItineraries(): Observable<Itinerary[]> {
    return this.http.get<Itinerary[]>(this.apiUrl).pipe(
      map(response => response ?? []), // Ensure response is an array
      catchError(this.handleError)
    );
  }

  // Add a new itinerary
  addItinerary(itinerary: Itinerary): Observable<Itinerary> {
    console.log('Adding itinerary:', itinerary);
    return this.http.post<Itinerary>(this.apiUrl, itinerary).pipe(
      catchError(this.handleError)
    );
  }

  // Update an existing itinerary
  updateItinerary(itineraryId: string, itinerary: Itinerary): Observable<Itinerary> {
    console.log(`Updating itinerary (ID: ${itineraryId}):`, itinerary);
    return this.http.put<Itinerary>(`${this.apiUrl}/${itineraryId}`, itinerary).pipe(
      catchError(this.handleError)
    );
  }

  // Delete an itinerary
  deleteItinerary(itineraryId: string): Observable<void> {
    console.log(`Deleting itinerary (ID: ${itineraryId})`);
    return this.http.delete<void>(`${this.apiUrl}/${itineraryId}`).pipe(
      catchError(this.handleError)
    );
  }

  // General error handling
  private handleError(error: HttpErrorResponse): Observable<never> {
    let errorMessage = 'Something went wrong, please try again later.';

    if (error.error instanceof ErrorEvent) {
      console.error('Client-side error:', error.error.message);
      errorMessage = `Client-side error: ${error.error.message}`;
    } else {
      console.error(`Backend error ${error.status}:`, error.error);
      errorMessage = `Error ${error.status}: ${error.error?.message || 'Unknown error'}`;
    }

    return throwError(() => new Error(errorMessage));
  }
}



HTML 

<div class="container">
  <h2>Manage Itineraries</h2>

  <!-- Add/Edit Itinerary Form -->
  <form (submit)="onSubmit()" class="itinerary-form">
    <input type="text" [(ngModel)]="itinerary.title" name="title" placeholder="Title" required />
    <input type="text" [(ngModel)]="itinerary.destination" name="destination" placeholder="Destination" required />
    <textarea [(ngModel)]="itinerary.description" name="description" placeholder="Description" required></textarea>
    <input type="date" [(ngModel)]="itinerary.startDate" name="startDate" required />
    <input type="date" [(ngModel)]="itinerary.endDate" name="endDate" required />
    <button type="submit" class="btn btn-primary">
      {{ isEditing ? 'Update Itinerary' : 'Add Itinerary' }}
    </button>
  </form>

  <!-- Itineraries Table -->
  <table>
    <thead>
      <tr>
        <th>Title</th>
        <th>Destination</th>
        <th>Description</th>
        <th>Start Date</th>
        <th>End Date</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let item of itineraries">
        <td>{{ item.title }}</td>
        <td>{{ item.destination }}</td>
        <td>{{ item.description }}</td>
        <td>{{ item.startDate }}</td>
        <td>{{ item.endDate }}</td>
        <td>
          <button (click)="editItinerary(item)" class="btn btn-edit">Edit</button>
          <button (click)="deleteItinerary(item.id)" class="btn btn-delete">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>


css


.container {
  max-width: 800px;
  margin: auto;
  padding: 20px;
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

h2 {
  text-align: center;
  margin-bottom: 20px;
}

.itinerary-form {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-bottom: 20px;
}

.itinerary-form input,
.itinerary-form textarea {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

.itinerary-form button {
  width: 100%;
  padding: 10px;
  background: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.itinerary-form button:hover {
  background: #0056b3;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

table th,
table td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: center;
}

table th {
  background: #007bff;
  color: white;
}

.btn {
  padding: 5px 10px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.btn-edit {
  background: #ffc107;
  color: black;
}

.btn-edit:hover {
  background: #e0a800;
}

.btn-delete {
  background: #dc3545;
  color: white;
}

.btn-delete:hover {
  background: #c82333;
}
