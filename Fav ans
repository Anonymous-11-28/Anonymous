service common

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class CommonService {
  private apiUrl = 'http://localhost:3000'; // Adjust according to your JSON server URL

  constructor(private http: HttpClient) {}

  getDestinations(): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/destinations`).pipe(
      catchError(error => {
        console.error('Error fetching destinations', error);
        return throwError(() => new Error('Failed to fetch destinations'));
      })
    );
  }

  getSearch(): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/destinations`).pipe(
      catchError(error => {
        console.error('Error fetching search results', error);
        return throwError(() => new Error('Failed to fetch search results'));
      })
    );
  }

  getFavorites(userId: string): Observable<any> {
    return this.http.get<any[]>(`${this.apiUrl}/favorites?userId=${userId}`).pipe(
      map(favoritesList => favoritesList.length ? favoritesList[0] : null),
      catchError(error => {
        console.error('Error fetching favorites', error);
        return throwError(() => new Error('Failed to fetch favorites'));
      })
    );
  }

  addFavorite(userId: string, destinationId: string): Observable<any> {
    return this.getFavorites(userId).pipe(
      switchMap(favorites => {
        if (!favorites) {
          const newFavorite = { userId, destinationIds: [destinationId] };
          return this.http.post(`${this.apiUrl}/favorites`, newFavorite);
        } else if (!favorites.destinationIds.includes(destinationId)) {
          favorites.destinationIds.push(destinationId);
          return this.http.put(`${this.apiUrl}/favorites/${favorites.id}`, favorites);
        } else {
          return throwError(() => new Error('Destination already in favorites'));
        }
      }),
      catchError(error => {
        console.error('Error adding to favorites', error);
        return throwError(() => new Error('Failed to add to favorites'));
      })
    );
  }

  removeFavorite(userId: string, destinationId: string): Observable<any> {
    return this.getFavorites(userId).pipe(
      switchMap(favorites => {
        if (favorites) {
          favorites.destinationIds = favorites.destinationIds.filter(id => id !== destinationId);
          return this.http.put(`${this.apiUrl}/favorites/${favorites.id}`, favorites);
        } else {
          return throwError(() => new Error('No favorites found for this user'));
        }
      }),
      catchError(error => {
        console.error('Error removing favorite', error);
        return throwError(() => new Error('Failed to remove from favorites'));
      })
    );
  }
}


ts


import { Component, OnInit } from '@angular/core';
import { CommonService } from '../services/common.service';

@Component({
  selector: 'app-favorite',
  templateUrl: './favorite.component.html',
  styleUrls: ['./favorite.component.css']
})
export class FavoriteComponent implements OnInit {
  favorites: any[] = [];
  userId: string = '123'; // Replace with actual user ID (from auth service)

  constructor(private commonService: CommonService) {}

  ngOnInit(): void {
    this.loadFavorites();
  }

  loadFavorites(): void {
    this.commonService.getFavorites(this.userId).subscribe(favorites => {
      this.favorites = favorites ? favorites.destinationIds : [];
    });
  }

  removeFromFavorites(destinationId: string): void {
    this.commonService.removeFavorite(this.userId, destinationId).subscribe(() => {
      this.loadFavorites();
    });
  }
}
