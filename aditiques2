HTML

<div class="admin-container">
    <h2>Admin Itineraries</h2>
  
    <table>
      <thead>
        <tr>
          <th>ID</th>
          <th>Destination</th>
          <th>Attractions</th>
          <th>Lodging</th>
          <th>Dining</th>
          <th>Activities</th>
          <th>Start Date</th>
          <th>End Date</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let itinerary of itinerary">
          <td>{{ itinerary.id }}</td>
          <td>{{ getDestinationName(itinerary.destinationId) }}</td>
          <td>{{ itinerary.attractions?.join(', ') || 'N/A' }}</td>
          <td>{{ itinerary.lodging?.join(', ') || 'N/A' }}</td>
          <td>{{ itinerary.dining?.join(', ') || 'N/A' }}</td>
          <td>{{ itinerary.activities?.join(', ') || 'N/A' }}</td>
          <td>{{ itinerary.startDate }}</td>
          <td>{{ itinerary.endDate }}</td>
          <td>
            <button class="edit-btn" (click)="editItinerary(itinerary)">Edit</button>
            <button class="delete-btn" (click)="deleteItinerary(itinerary.id)">Delete</button>
          </td>
        </tr>
      </tbody>
    </table>
  </div>


TS



import { Component, OnInit } from '@angular/core';
import { AdminItineraryService } from '../../../services/admin-services/admin-itineraries.service';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-admin-itineraries',
  templateUrl: './admin-itineraries.component.html',
  styleUrls: ['./admin-itineraries.component.css']
})
export class AdminItineraryComponent implements OnInit {
  adminItineraries: any[] = [];
  destinations: any[] = [];
  isAdmin: boolean = false;

  constructor(private adminItineraryService: AdminItineraryService, private http: HttpClient) {}

  ngOnInit(): void {
    this.checkAdminAccess();
    this.loadItineraries();
    this.loadDestinations();
  }

  checkAdminAccess(): void {
    const adminUser = JSON.parse(localStorage.getItem('loggedInUser') || '{}');
    this.isAdmin = adminUser?.role === 'admin';
  }

  loadItineraries(): void {
    if (this.isAdmin) {
      this.adminItineraryService.getItineraries().subscribe((data) => {
        this.adminItineraries = data;
      });
    }
  }

  loadDestinations(): void {
    this.http.get<any[]>('http://localhost:3000/destinations').subscribe((data) => {
      this.destinations = data;
    });
  }

  getDestinationName(destinationId: string): string {
    const destination = this.destinations.find(d => d.id === destinationId);
    return destination ? destination.name : 'Unknown';
  }

  deleteItinerary(id: string): void {
    if (confirm('Are you sure you want to delete this itinerary?')) {
      this.adminItineraryService.deleteItinerary(id).subscribe(() => {
        this.adminItineraries = this.adminItineraries.filter(it => it.id !== id);
      });
    }
  }

  editItinerary(itinerary: any): void {
    const newStartDate = prompt('Enter new Start Date:', itinerary.startDate);
    const newEndDate = prompt('Enter new End Date:', itinerary.endDate);

    if (newStartDate && newEndDate) {
      const updatedItinerary = { ...itinerary, startDate: newStartDate, endDate: newEndDate };
      this.adminItineraryService.updateItinerary(itinerary.id, updatedItinerary).subscribe(() => {
        this.loadItineraries();
      });
    }
  }
}



service

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class AdminItineraryService {
  private apiUrl = 'http://localhost:3000/itinerary'; // API URL for itineraries

  constructor(private http: HttpClient) {}

  // Get all itineraries
  getItineraries(): Observable<any[]> {
    return this.http.get<any[]>(this.apiUrl).pipe(
      map(response => response), // Modify this if the response has a wrapper
      catchError(this.handleError)
    );
  }

  // Add a new itinerary
  addItinerary(itinerary: any): Observable<any> {
    console.log('Sending POST request to add itinerary:', itinerary);  // Add debug logging
    return this.http.post<any>(this.apiUrl, itinerary).pipe(
      catchError(this.handleError)
    );
  }

  // Edit an existing itinerary
  updateItinerary(itineraryId: string, itinerary: any): Observable<any> {
    console.log('Sending PUT request to update itinerary with ID:', itineraryId, itinerary); // Add debug logging
    return this.http.put<any>(`${this.apiUrl}/${itineraryId}`, itinerary).pipe(
      catchError(this.handleError)
    );
  }

  // Delete an itinerary
  deleteItinerary(itineraryId: string): Observable<any> {
    console.log('Sending DELETE request for itinerary with ID:', itineraryId); // Add debug logging
    return this.http.delete<any>(`${this.apiUrl}/${itineraryId}`).pipe(
      catchError(this.handleError)
    );
  }

  // Error handling function
  private handleError(error: any): Observable<never> {
    let errorMessage = 'Something went wrong, please try again later.';
    
    if (error.error instanceof ErrorEvent) {
      // Client-side or network error occurred
      console.error('Client-side error:', error.error.message);
      errorMessage = `Client-side error: ${error.error.message}`;
    } else {
      // Backend error occurred
      console.error(`Backend error: ${error.status}, body was: ${error.error}`);
      errorMessage = `Backend error: ${error.status}, ${error.error?.message || 'Unknown error'}`;
    }

    // Display a user-friendly message (can be improved to show in UI)
    return throwError(() => new Error(errorMessage));
  }
}
{
  "destinations": [
    {
      "id": "1",
      "name": "Bali Destination Guide",
      "description": "Explore the beauty of Bali with our comprehensive guide.",
      "image": "assets/bali_indonesia.jpg",
      "history": "Bali is an island in Indonesia known for its tropical beaches and rich culture.",
      "culture": "Bali has a rich tradition in music, dance, and art, deeply influenced by Hindu culture.",
      "attractions": [
        "Uluwatu Temple",
        "Sacred Monkey Forest",
        "Mount Agung"
      ],
      "lodging": [
        "Luxury Resort",
        "Budget Hostel",
        "Private Villas"
      ],
      "dining": [
        "Bali Cafe",
        "Seafood Restaurant",
        "Local Street Food"
      ],
      "activities": [
        "Surfing",
        "Snorkeling",
        "Yoga Retreats"
      ],
      "reviews": [
        {
          "id": "1",
          "destinationId": "1",
          "userId": "6185",
          "rating": 5,
          "text": "Amazing guide, helped me plan my trip perfectly!"
        },
        {
          "id": "2",
          "destinationId": "1",
          "userId": "54ba",
          "rating": 4,
          "text": "Great information but needs more details on activities."
        }
      ]
    },
    {
      "id": "2",
      "name": "Paris Destination Guide",
      "description": "Discover the magic of Paris, the City of Lights.",
      "image": "assets/paris_logo.png",
      "history": "Paris is known for its history of art, fashion, and culture, with iconic landmarks like the Eiffel Tower.",
      "culture": "The culture of Paris has a rich history in the arts, literature, and fashion, attracting people worldwide.",
      "attractions": [
        "Eiffel Tower",
        "Louvre Museum",
        "Notre-Dame Cathedral"
      ],
      "lodging": [
        "Luxury Hotels",
        "Affordable Hostels",
        "Boutique Hotels"
      ],
      "dining": [
        "Le Meurice",
        "Café de Flore",
        "Street Crêpes"
      ],
      "activities": [
        "Sightseeing",
        "Museums",
        "Shopping"
      ],
      "reviews": [
        {
          "id": "3",
          "destinationId": "2",
          "userId": "6185",
          "rating": 5,
          "text": "Amazing guide, helped me plan my trip perfectly!"
        },
        {
          "id": "4",
          "destinationId": "2",
          "userId": "aa6b",
          "rating": 4,
          "text": "Great information but needs more details on activities."
        }
      ]
    },
    {
      "id": "",
      "name": "hi",
      "description": "g",
      "image": "",
      "history": "",
      "culture": "",
      "attractions": [],
      "lodging": [],
      "dining": [],
      "activities": [],
      "reviews": []
    },
    {
      "id": "",
      "name": "BZA",
      "description": "Bezawada",
      "image": "",
      "history": "",
      "culture": "",
      "attractions": [],
      "lodging": [],
      "dining": [],
      "activities": [],
      "reviews": []
    },
    {
      "id": "",
      "name": "VGA",
      "description": "vijayawada",
      "image": "",
      "history": "",
      "culture": "",
      "attractions": [],
      "lodging": [],
      "dining": [],
      "activities": [],
      "reviews": []
    }
  ],
  "favorites": [
    {
      "userId": "6185",
      "destinationIds": [
        "1",
        "2"
      ],
      "id": "dede"
    }
  ],
  "viewDetails": [
    {
      "id": "123",
      "destinationId": "1",
      "title": "Bali Destination Guide",
      "description": "Detailed information about Bali including history, culture, attractions, and recommendations.",
      "reviews": [
        {
          "id": "1",
          "destinationId": "1",
          "userId": "6185",
          "rating": 5,
          "text": "Amazing guide, helped me plan my trip perfectly!"
        },
        {
          "id": "2",
          "destinationId": "1",
          "userId": "54ba",
          "rating": 4,
          "text": "Great information but needs more details on activities."
        }
      ]
    },
    {
      "id": "124",
      "destinationId": "2",
      "title": "Paris Destination Guide",
      "description": "Explore Paris with the most up-to-date details on history, culture, attractions, and local tips.",
      "reviews": [
        {
          "id": "5",
          "destinationId": "2",
          "userId": "aa6b",
          "rating": 5,
          "text": "Fantastic guide, perfect for first-time visitors to Paris!"
        }
      ]
    }
  ],
  "users": [
    {
      "id": "6185",
      "name": "Sanjeev",
      "email": "sanjeev@mail.com",
      "password": "123",
      "role": "user"
    },
    {
      "id": "aa6b",
      "name": "Lavanya",
      "email": "lavanya@mail.com",
      "password": "pandu",
      "role": "user"
    },
    {
      "id": "54ba",
      "name": "Pratiksha",
      "email": "pratiksha@mail.com",
      "password": "123",
      "role": "user"
    },
    {
      "id": "b89b",
      "name": "Snehal",
      "email": "snehal@mail.com",
      "password": "007",
      "role": "user"
    }
  ],
  "admins": [
    {
      "id": "admin123",
      "name": "Admin User",
      "email": "admin@mail.com",
      "password": "admin",
      "role": "admin"
    }
  ],
  "travelgroup": [
    {
      "groups": [
        {
          "id": "1",
          "name": "Beach Lovers",
          "description": "A group for people who love beaches and tropical vacations.",
          "isPrivate": false,
          "creatorId": "6185",
          "members": [
            "6185"
          ],
          "invitedUsers": []
        },
        {
          "id": "2",
          "name": "Mountain Explorers",
          "description": "Adventure group for trekking and hiking in mountains.",
          "isPrivate": true,
          "creatorId": "6185",
          "members": [
            "6185"
          ],
          "invitedUsers": [
            "1234"
          ]
        }
      ],
      "id": "5440"
    }
  ],
  "itinerary": [
    {
      "id": "a189",
      "destinationId": "1",
      "attractions": [
        "Sacred Monkey Forest"
      ],
      "lodging": [
        "Luxury Resort"
      ],
      "dining": [
        "Bali Cafe"
      ],
      "activities": [
        "Surfing"
      ],
      "startDate": "2025-04-01",
      "endDate": "2025-04-10"
    },
    {
      "id": "38af",
      "name": "hello",
      "description": "hi",
      "startDate": "2025-04-17",
      "endDate": "2025-04-30"
    }
  ]
}

check this one

  
