ts

import { Component, OnInit } from '@angular/core';
import { ItineraryService } from '../services/itinerary.service';
import { Itinerary } from '../models/itinerary.model';

@Component({
  selector: 'app-admin-itineraries',
  templateUrl: './admin-itineraries.component.html',
  styleUrls: ['./admin-itineraries.component.css']
})
export class AdminItinerariesComponent implements OnInit {
  itineraries: Itinerary[] = [];

  constructor(private itineraryService: ItineraryService) {}

  ngOnInit(): void {
    this.loadItineraries();
  }

  loadItineraries(): void {
    this.itineraryService.getItineraries().subscribe(data => {
      this.itineraries = data;
    });
  }

  deleteItinerary(id: string): void {
    this.itineraryService.deleteItinerary(id).subscribe(() => {
      this.loadItineraries();
    });
  }
}

HTML 
<div class="container">
  <h2>Manage Itineraries</h2>
  <button (click)="loadItineraries()">Refresh</button>
  <ul>
    <li *ngFor="let itinerary of itineraries">
      <h3>{{ itinerary.id }}</h3>
      <p>Start Date: {{ itinerary.startDate }}</p>
      <p>End Date: {{ itinerary.endDate }}</p>
      <button (click)="deleteItinerary(itinerary.id)">Delete</button>
    </li>
  </ul>
</div>

CSS 


.container {
  max-width: 800px;
  margin: auto;
  padding: 20px;
  background-color: #f9f9f9;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

h2 {
  text-align: center;
  color: #333;
}

button {
  display: block;
  margin: 10px auto;
  padding: 8px 16px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

ul {
  list-style: none;
  padding: 0;
}

li {
  background: white;
  margin: 10px 0;
  padding: 15px;
  border-radius: 5px;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
}

service 



import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Itinerary } from '../models/itinerary.model';

@Injectable({
  providedIn: 'root'
})
export class ItineraryService {
  private apiUrl = 'http://localhost:3000/itinerary';

  constructor(private http: HttpClient) {}

  getItineraries(): Observable<Itinerary[]> {
    return this.http.get<Itinerary[]>(this.apiUrl);
  }

  deleteItinerary(id: string): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }
}




HTML5 



<div class="container">
  <h2>Manage Itineraries</h2>

  <!-- Button to open Add Itinerary form -->
  <button (click)="openAddForm()">Add New Itinerary</button>

  <!-- Add/Edit Itinerary Form -->
  <div *ngIf="showForm" class="form-container">
    <h3>{{ isEditing ? 'Edit Itinerary' : 'Add New Itinerary' }}</h3>

    <label>Start Date:</label>
    <input type="date" [(ngModel)]="selectedItinerary.startDate" />

    <label>End Date:</label>
    <input type="date" [(ngModel)]="selectedItinerary.endDate" />

    <button (click)="saveItinerary()">{{ isEditing ? 'Update' : 'Save' }}</button>
    <button (click)="cancelForm()">Cancel</button>
  </div>

  <!-- List of itineraries -->
  <ul>
    <li *ngFor="let itinerary of itineraries">
      <h3>Itinerary ID: {{ itinerary.id }}</h3>
      <p><strong>Start Date:</strong> {{ itinerary.startDate }}</p>
      <p><strong>End Date:</strong> {{ itinerary.endDate }}</p>

      <button (click)="editItinerary(itinerary)">Edit</button>
      <button (click)="deleteItinerary(itinerary.id)" class="delete-btn">Delete</button>
    </li>
  </ul>
</div>


ts




import { Component, OnInit } from '@angular/core';
import { AdminItineraryService } from '../services/admin-itinerary.service';

@Component({
  selector: 'app-admin-itinerary',
  templateUrl: './admin-itinerary.component.html',
  styleUrls: ['./admin-itinerary.component.css']
})
export class AdminItineraryComponent implements OnInit {
  itineraries: any[] = [];
  showForm: boolean = false;
  isEditing: boolean = false;
  selectedItinerary: any = { id: '', startDate: '', endDate: '' };

  constructor(private itineraryService: AdminItineraryService) {}

  ngOnInit(): void {
    this.loadItineraries();
  }

  loadItineraries(): void {
    this.itineraryService.getItineraries().subscribe(data => {
      this.itineraries = data;
    });
  }

  openAddForm(): void {
    this.selectedItinerary = { id: '', startDate: '', endDate: '' };
    this.isEditing = false;
    this.showForm = true;
  }

  editItinerary(itinerary: any): void {
    this.selectedItinerary = { ...itinerary };
    this.isEditing = true;
    this.showForm = true;
  }

  saveItinerary(): void {
    if (this.isEditing) {
      this.itineraryService.updateItinerary(this.selectedItinerary).subscribe(() => {
        this.loadItineraries();
        this.showForm = false;
      });
    } else {
      this.selectedItinerary.id = Math.random().toString(36).substr(2, 9); // Generate random ID
      this.itineraryService.addItinerary(this.selectedItinerary).subscribe(() => {
        this.loadItineraries();
        this.showForm = false;
      });
    }
  }

  deleteItinerary(id: string): void {
    this.itineraryService.deleteItinerary(id).subscribe(() => {
      this.loadItineraries();
    });
  }

  cancelForm(): void {
    this.showForm = false;
  }
}

service 


import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AdminItineraryService {
  private apiUrl = 'http://localhost:3000/itinerary'; // JSON Server API URL

  constructor(private http: HttpClient) {}

  // Fetch all itineraries
  getItineraries(): Observable<any[]> {
    return this.http.get<any[]>(this.apiUrl);
  }

  // Add new itinerary
  addItinerary(itinerary: any): Observable<any> {
    return this.http.post<any>(this.apiUrl, itinerary);
  }

  // Update an existing itinerary
  updateItinerary(itinerary: any): Observable<any> {
    return this.http.put<any>(`${this.apiUrl}/${itinerary.id}`, itinerary);
  }

  // Delete an itinerary
  deleteItinerary(id: string): Observable<any> {
    return this.http.delete<any>(`${this.apiUrl}/${id}`);
  }
}


css

.container {
    max-width: 900px;
    margin: 40px auto;
    padding: 25px;
    background-color: #ffffff;
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    font-family: 'Arial', sans-serif;
}

h2 {
    text-align: center;
    color: #222;
    font-size: 24px;
    margin-bottom: 20px;
}

button {
    display: inline-block;
    padding: 10px 20px;
    background: linear-gradient(135deg, #007bff, #0056b3);
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 16px;
    transition: all 0.3s ease;
}

button:hover {
    background: linear-gradient(135deg, #0056b3, #003f7f);
    transform: scale(1.05);
}

ul {
    list-style: none;
    padding: 0;
}

li {
    background: #fff;
    margin: 15px 0;
    padding: 18px;
    border-radius: 10px;
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

li:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
}

.itinerary-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 18px;
    font-weight: bold;
    color: #444;
}

.itinerary-details {
    margin-top: 10px;
    font-size: 14px;
    color: #666;
}

@media (max-width: 600px) {
    .container {
        max-width: 100%;
        padding: 15px;
    }

    button {
        width: 100%;
    }
}
