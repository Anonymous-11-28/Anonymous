ts file 

import { Component, OnInit } from '@angular/core';
import { AdminItineraryService } from '../../../services/admin-services/admin-itineraries.service';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-admin-itineraries',
  templateUrl: './admin-itineraries.component.html',
  styleUrls: ['./admin-itineraries.component.css']
})
export class AdminItineraryComponent implements OnInit {
  itineraries: any[] = [];  // Changed variable name
  destinations: any[] = [];
  isAdmin: boolean = false;

  constructor(private adminItineraryService: AdminItineraryService, private http: HttpClient) {}

  ngOnInit(): void {
    this.checkAdminAccess();
    this.loadItineraries();
    this.loadDestinations();
  }

  checkAdminAccess(): void {
    const adminUser = JSON.parse(localStorage.getItem('loggedInUser') || '{}');
    this.isAdmin = adminUser?.role === 'admin';
  }

  loadItineraries(): void {
    this.adminItineraryService.getItineraries().subscribe((data) => {
      this.itineraries = data; // Correctly assigning fetched itineraries
    });
  }

  loadDestinations(): void {
    this.http.get<any[]>('http://localhost:3000/destinations').subscribe((data) => {
      this.destinations = data;
    });
  }

  getDestinationName(destinationId: string): string {
    const destination = this.destinations.find(d => d.id === destinationId);
    return destination ? destination.name : 'Unknown';
  }

  deleteItinerary(id: string): void {
    if (confirm('Are you sure you want to delete this itinerary?')) {
      this.adminItineraryService.deleteItinerary(id).subscribe(() => {
        this.itineraries = this.itineraries.filter(it => it.id !== id);
      });
    }
  }

  editItinerary(itinerary: any): void {
    const newStartDate = prompt('Enter new Start Date:', itinerary.startDate);
    const newEndDate = prompt('Enter new End Date:', itinerary.endDate);

    if (newStartDate && newEndDate) {
      const updatedItinerary = { ...itinerary, startDate: newStartDate, endDate: newEndDate };
      this.adminItineraryService.updateItinerary(itinerary.id, updatedItinerary).subscribe(() => {
        this.loadItineraries();
      });
    }
  }
}


HTML 


<div class="admin-container">
    <h2>Admin Itineraries</h2>

    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Destination</th>
                <th>Attractions</th>
                <th>Lodging</th>
                <th>Dining</th>
                <th>Activities</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr *ngFor="let itinerary of itineraries"> <!-- Corrected variable name -->
                <td>{{ itinerary.id }}</td>
                <td>{{ getDestinationName(itinerary.destinationId) }}</td>
                <td>{{ itinerary.attractions?.join(', ') || 'N/A' }}</td>
                <td>{{ itinerary.lodging?.join(', ') || 'N/A' }}</td>
                <td>{{ itinerary.dining?.join(', ') || 'N/A' }}</td>
                <td>{{ itinerary.activities?.join(', ') || 'N/A' }}</td>
                <td>{{ itinerary.startDate }}</td>
                <td>{{ itinerary.endDate }}</td>
                <td>
                    <button class="edit-btn" (click)="editItinerary(itinerary)" *ngIf="isAdmin">Edit</button>
                    <button class="delete-btn" (click)="deleteItinerary(itinerary.id)" *ngIf="isAdmin">Delete</button>
                </td>
            </tr>
        </tbody>
    </table>
</div>




service 


import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class AdminItineraryService {
  private apiUrl = 'http://localhost:3000/itinerary'; // Make sure the JSON key is correct

  constructor(private http: HttpClient) {}

  getItineraries(): Observable<any[]> {
    return this.http.get<any[]>(this.apiUrl).pipe(
      catchError(this.handleError)
    );
  }

  addItinerary(itinerary: any): Observable<any> {
    return this.http.post<any>(this.apiUrl, itinerary).pipe(
      catchError(this.handleError)
    );
  }

  updateItinerary(itineraryId: string, itinerary: any): Observable<any> {
    return this.http.put<any>(`${this.apiUrl}/${itineraryId}`, itinerary).pipe(
      catchError(this.handleError)
    );
  }

  deleteItinerary(itineraryId: string): Observable<any> {
    return this.http.delete<any>(`${this.apiUrl}/${itineraryId}`).pipe(
      catchError(this.handleError)
    );
  }

  private handleError(error: any): Observable<never> {
    let errorMessage = 'Something went wrong, please try again later.';
    return throwError(() => new Error(errorMessage));
  }
}

